// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250604053722_update-them-bang-don-dep-cho-nhan-vien-tap-vu")]
    partial class updatethembangdondepchonhanvientapvu
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Model.Auth.roleInformation", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("roleId");

                    b.ToTable("roleInformation");

                    b.HasData(
                        new
                        {
                            roleId = "45b367d8-9bdc-4589-8b57-9eee358f014b",
                            roleName = "Director"
                        },
                        new
                        {
                            roleId = "0e73a120-1b4c-4fb8-827c-5484ebca3c44",
                            roleName = "Cashier Staff"
                        },
                        new
                        {
                            roleId = "2608e42d-a808-4f6b-a834-81241cb0e05f",
                            roleName = "Cleaning Staff"
                        },
                        new
                        {
                            roleId = "4cb1d82c-ec82-4902-af84-8040862a4dfe",
                            roleName = "Ticket Inspector Staff"
                        },
                        new
                        {
                            roleId = "62a9a81b-b226-4f6b-9212-a629c41f162e",
                            roleName = "Customer"
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userInformation", b =>
                {
                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IdentityCode")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("loginUserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("loginUserPassword")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("userPoint")
                        .HasColumnType("int");

                    b.HasKey("userId");

                    b.ToTable("userInformation");

                    b.HasData(
                        new
                        {
                            userId = "0f43dc88-a427-4360-a16d-42cac375046e",
                            IdentityCode = "123456789012",
                            dateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            loginUserEmail = "admin@example.com",
                            loginUserPassword = "password123",
                            phoneNumber = "0912345678",
                            userName = "Admin User",
                            userPoint = 1000
                        },
                        new
                        {
                            userId = "2dd341f8-cb65-4f47-aa08-2acd1ac35087",
                            IdentityCode = "012345678901",
                            dateOfBirth = new DateTime(1995, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            loginUserEmail = "customer1@example.com",
                            loginUserPassword = "password123",
                            phoneNumber = "0987654321",
                            userName = "Nguyen Van A",
                            userPoint = 250
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userRoleInformation", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("roleId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("userRoleInformation");

                    b.HasData(
                        new
                        {
                            roleId = "45b367d8-9bdc-4589-8b57-9eee358f014b",
                            userId = "0f43dc88-a427-4360-a16d-42cac375046e"
                        },
                        new
                        {
                            roleId = "62a9a81b-b226-4f6b-9212-a629c41f162e",
                            userId = "2dd341f8-cb65-4f47-aa08-2acd1ac35087"
                        });
                });

            modelBuilder.Entity("backend.Model.Booking.Order", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("isPay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<long>("totalAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("orderId");

                    b.HasIndex("userId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailFood", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("foodInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("quanlity")
                        .HasColumnType("int");

                    b.HasKey("orderId", "foodInformationId");

                    b.HasIndex("foodInformationId");

                    b.ToTable("orderDetailFood");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailTicket", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("seatsId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("priceInformationId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("orderId", "seatsId", "priceInformationId");

                    b.HasIndex("priceInformationId");

                    b.HasIndex("seatsId");

                    b.ToTable("orderDetail");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.Seats", b =>
                {
                    b.Property<string>("seatsId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("isMiddle")
                        .HasColumnType("bit");

                    b.Property<bool>("isTaken")
                        .HasColumnType("bit");

                    b.Property<string>("seatsNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("seatsId");

                    b.HasIndex("cinemaRoomId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            seatsId = "c3ad3f2d-b220-482b-b97f-dd8991e744d5",
                            cinemaRoomId = "6d4a7444-ed65-4906-81ba-3236980544a1",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "A1"
                        },
                        new
                        {
                            seatsId = "8aad038e-2599-4589-b110-613b6d7f768f",
                            cinemaRoomId = "6d4a7444-ed65-4906-81ba-3236980544a1",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "A2"
                        },
                        new
                        {
                            seatsId = "6a9f1eab-64bb-4745-ba07-97e343a43900",
                            cinemaRoomId = "6d4a7444-ed65-4906-81ba-3236980544a1",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "B1"
                        },
                        new
                        {
                            seatsId = "eddc3e49-124b-4f7f-8962-2444df3e579e",
                            cinemaRoomId = "6d4a7444-ed65-4906-81ba-3236980544a1",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "B2"
                        },
                        new
                        {
                            seatsId = "7d385243-3c6d-4137-ba5b-125cf4a8ea67",
                            cinemaRoomId = "02be2fc9-7db4-463b-8c14-f2eccc9a27af",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "C1"
                        },
                        new
                        {
                            seatsId = "dc91f0cc-6f03-45dd-9084-b6565de8f4db",
                            cinemaRoomId = "02be2fc9-7db4-463b-8c14-f2eccc9a27af",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "C2"
                        },
                        new
                        {
                            seatsId = "d0cc32c1-3a3f-4358-b184-3bb31fba6f5e",
                            cinemaRoomId = "1faff209-1204-4500-a0a5-57d5e7e763cf",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "D1"
                        },
                        new
                        {
                            seatsId = "ddcb6e5a-d800-4a57-b263-4ee54f9749c0",
                            cinemaRoomId = "1faff209-1204-4500-a0a5-57d5e7e763cf",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "D2"
                        });
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.Property<string>("cinemaRoomId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("cinemaRoomNumber")
                        .HasColumnType("int");

                    b.HasKey("cinemaRoomId");

                    b.HasIndex("cinemaId");

                    b.ToTable("cinemaRoom");

                    b.HasData(
                        new
                        {
                            cinemaRoomId = "6d4a7444-ed65-4906-81ba-3236980544a1",
                            cinemaId = "6150789a-662c-4db2-83c2-45fd5ffb6fb9",
                            cinemaRoomNumber = 1
                        },
                        new
                        {
                            cinemaRoomId = "02be2fc9-7db4-463b-8c14-f2eccc9a27af",
                            cinemaId = "6150789a-662c-4db2-83c2-45fd5ffb6fb9",
                            cinemaRoomNumber = 2
                        },
                        new
                        {
                            cinemaRoomId = "1faff209-1204-4500-a0a5-57d5e7e763cf",
                            cinemaId = "60a38b4c-a233-42bd-a91b-2f06eb78e4c4",
                            cinemaRoomNumber = 1
                        });
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cleaningStatus", b =>
                {
                    b.Property<string>("roomID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("staffID")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("startedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("endedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("userInformationuserId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("roomID", "staffID", "startedTime");

                    b.HasIndex("cinemaRoomId");

                    b.HasIndex("userInformationuserId");

                    b.ToTable("cleaningStatus");
                });

            modelBuilder.Entity("backend.Model.Cinemas.Cinema", b =>
                {
                    b.Property<string>("cinemaId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaContactHotlineNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("cinemaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cinemaLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("cinemaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("cinemaId");

                    b.ToTable("Cinema");

                    b.HasData(
                        new
                        {
                            cinemaId = "6150789a-662c-4db2-83c2-45fd5ffb6fb9",
                            cinemaContactHotlineNumber = "0901234567",
                            cinemaDescription = "A modern cinema with multiple screens.",
                            cinemaLocation = "19 Cao Thang",
                            cinemaName = "Mega GS Cao Thang"
                        },
                        new
                        {
                            cinemaId = "60a38b4c-a233-42bd-a91b-2f06eb78e4c4",
                            cinemaContactHotlineNumber = "0907654321",
                            cinemaDescription = "Comfortable seating and great sound system.",
                            cinemaLocation = "12 Cantavil",
                            cinemaName = "Lotte Cinema Cantavil"
                        });
                });

            modelBuilder.Entity("backend.Model.Cinemas.cinemaMovieInformation", b =>
                {
                    b.Property<string>("cinemaId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("cinemaId", "movieId");

                    b.HasIndex("movieId");

                    b.ToTable("cinemaMovieInformation");

                    b.HasData(
                        new
                        {
                            cinemaId = "6150789a-662c-4db2-83c2-45fd5ffb6fb9",
                            movieId = "0fd06f66-9112-4cc4-9aeb-f0a96bb73f51"
                        },
                        new
                        {
                            cinemaId = "6150789a-662c-4db2-83c2-45fd5ffb6fb9",
                            movieId = "ddaf57a9-b032-4a16-a437-f992db311123"
                        },
                        new
                        {
                            cinemaId = "60a38b4c-a233-42bd-a91b-2f06eb78e4c4",
                            movieId = "0fd06f66-9112-4cc4-9aeb-f0a96bb73f51"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.Language", b =>
                {
                    b.Property<string>("languageId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("languageDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("languageId");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            languageId = "316ec4b2-87cf-4b6f-9a3f-45717069ba26",
                            languageDetail = "English"
                        },
                        new
                        {
                            languageId = "41486d7b-88de-47e2-9aaa-c9707c8e6ce7",
                            languageDetail = "Vietnamese"
                        },
                        new
                        {
                            languageId = "4a015649-2ec0-4776-8ee8-6694bfc98c54",
                            languageDetail = "Korean"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieCommentDetail", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userCommentDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("movieId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("movieCommentDetail");
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenre", b =>
                {
                    b.Property<string>("movieGenreId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieGenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("movieGenreId");

                    b.ToTable("movieGenre");

                    b.HasData(
                        new
                        {
                            movieGenreId = "b09a62b0-9ff5-4ab6-a6c0-0914960d5cc7",
                            movieGenreName = "Action"
                        },
                        new
                        {
                            movieGenreId = "b9f55917-5d1e-4bba-a41d-536860e15849",
                            movieGenreName = "Comedy"
                        },
                        new
                        {
                            movieGenreId = "700355b6-8b87-4411-a86b-0786a4df55f5",
                            movieGenreName = "Horror"
                        },
                        new
                        {
                            movieGenreId = "10d1643d-0728-4812-9f23-6763eaa87ec0",
                            movieGenreName = "Drama"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenreInformation", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieGenreId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("movieId", "movieGenreId");

                    b.HasIndex("movieGenreId");

                    b.ToTable("movieGenreInformation");

                    b.HasData(
                        new
                        {
                            movieId = "0fd06f66-9112-4cc4-9aeb-f0a96bb73f51",
                            movieGenreId = "b09a62b0-9ff5-4ab6-a6c0-0914960d5cc7"
                        },
                        new
                        {
                            movieId = "0fd06f66-9112-4cc4-9aeb-f0a96bb73f51",
                            movieGenreId = "10d1643d-0728-4812-9f23-6763eaa87ec0"
                        },
                        new
                        {
                            movieId = "ddaf57a9-b032-4a16-a437-f992db311123",
                            movieGenreId = "b09a62b0-9ff5-4ab6-a6c0-0914960d5cc7"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("languageId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieActor")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("movieDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("movieDirector")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("movieDuration")
                        .HasColumnType("int");

                    b.Property<byte[]>("movieImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("movieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("movieTrailerUrl")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<string>("movieVisualFormatId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("movieId");

                    b.HasIndex("languageId");

                    b.HasIndex("movieVisualFormatId");

                    b.ToTable("movieInformation");

                    b.HasData(
                        new
                        {
                            movieId = "0fd06f66-9112-4cc4-9aeb-f0a96bb73f51",
                            languageId = "316ec4b2-87cf-4b6f-9a3f-45717069ba26",
                            movieActor = "Timothée Chalamet, Zendaya, Rebecca Ferguson",
                            movieDescription = "Paul Atreides unites with Chani and the Fremen while seeking revenge against those who destroyed his family.",
                            movieDirector = "Denis Villeneuve",
                            movieDuration = 166,
                            movieImage = new byte[] { 100, 117, 110, 101, 50, 95, 105, 109, 97, 103, 101, 95, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114 },
                            movieName = "Dune: Part Two",
                            movieTrailerUrl = "https://www.youtube.com/watch?v=Way9Dexny3w",
                            movieVisualFormatId = "7bfa77f1-3257-46bc-9016-d65fdc098fa2"
                        },
                        new
                        {
                            movieId = "ddaf57a9-b032-4a16-a437-f992db311123",
                            languageId = "316ec4b2-87cf-4b6f-9a3f-45717069ba26",
                            movieActor = "Rebecca Hall, Brian Tyree Henry, Dan Stevens",
                            movieDescription = "Godzilla and Kong must unite to fight a colossal undiscovered threat hidden within our world.",
                            movieDirector = "Adam Wingard",
                            movieDuration = 115,
                            movieImage = new byte[] { 103, 111, 100, 122, 105, 108, 108, 97, 120, 107, 111, 110, 103, 95, 105, 109, 97, 103, 101, 95, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114 },
                            movieName = "Godzilla x Kong: The New Empire",
                            movieTrailerUrl = "https://www.youtube.com/watch?v=EOk9z-WbN5o",
                            movieVisualFormatId = "7b52efc6-9ff1-4e28-932e-a2df9c39049c"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.Property<string>("movieScheduleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("showDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("movieScheduleId");

                    b.HasIndex("cinemaRoomId");

                    b.HasIndex("movieId");

                    b.ToTable("movieSchedule");

                    b.HasData(
                        new
                        {
                            movieScheduleId = "36a6f8f2-fbcb-4c35-9f65-497de967b186",
                            cinemaRoomId = "6d4a7444-ed65-4906-81ba-3236980544a1",
                            movieId = "0fd06f66-9112-4cc4-9aeb-f0a96bb73f51",
                            showDateTime = new DateTime(2025, 6, 5, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            movieScheduleId = "69aae031-21f0-41a1-92c6-cd1385b850de",
                            cinemaRoomId = "6d4a7444-ed65-4906-81ba-3236980544a1",
                            movieId = "ddaf57a9-b032-4a16-a437-f992db311123",
                            showDateTime = new DateTime(2025, 6, 5, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            movieScheduleId = "b184edd0-568e-4fb0-b8f7-fd5b99f7c7f2",
                            cinemaRoomId = "1faff209-1204-4500-a0a5-57d5e7e763cf",
                            movieId = "0fd06f66-9112-4cc4-9aeb-f0a96bb73f51",
                            showDateTime = new DateTime(2025, 6, 6, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormat", b =>
                {
                    b.Property<string>("movieVisualFormatId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("movieVisualFormatId");

                    b.ToTable("movieVisualFormat");

                    b.HasData(
                        new
                        {
                            movieVisualFormatId = "7bfa77f1-3257-46bc-9016-d65fdc098fa2",
                            movieVisualFormatName = "2D"
                        },
                        new
                        {
                            movieVisualFormatId = "7b52efc6-9ff1-4e28-932e-a2df9c39049c",
                            movieVisualFormatName = "3D"
                        },
                        new
                        {
                            movieVisualFormatId = "1494b18c-bdcd-4985-a905-c065ed9c0f04",
                            movieVisualFormatName = "IMAX"
                        });
                });

            modelBuilder.Entity("backend.Model.Price.priceInformation", b =>
                {
                    b.Property<string>("priceInformationId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<long>("priceAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("userTypeId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("priceInformationId");

                    b.HasIndex("movieVisualFormatId");

                    b.HasIndex("userTypeId");

                    b.ToTable("priceInformation");

                    b.HasData(
                        new
                        {
                            priceInformationId = "2d9f9cfe-0364-4a6a-9445-0846e35d40cb",
                            movieVisualFormatId = "7bfa77f1-3257-46bc-9016-d65fdc098fa2",
                            priceAmount = 100000L,
                            userTypeId = "f45dfec0-295e-4c7c-9ea8-1ed09a4acf9e"
                        },
                        new
                        {
                            priceInformationId = "860902ce-d76d-4339-80e0-d21b6aa7997d",
                            movieVisualFormatId = "7bfa77f1-3257-46bc-9016-d65fdc098fa2",
                            priceAmount = 70000L,
                            userTypeId = "a7417183-2193-4977-9a41-a89419da4bce"
                        },
                        new
                        {
                            priceInformationId = "b8fc6e32-7350-4ff3-af69-eaa805695cbd",
                            movieVisualFormatId = "7b52efc6-9ff1-4e28-932e-a2df9c39049c",
                            priceAmount = 130000L,
                            userTypeId = "f45dfec0-295e-4c7c-9ea8-1ed09a4acf9e"
                        });
                });

            modelBuilder.Entity("backend.Model.Price.userType", b =>
                {
                    b.Property<string>("userTypeId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("userTypeId");

                    b.ToTable("userType");

                    b.HasData(
                        new
                        {
                            userTypeId = "f45dfec0-295e-4c7c-9ea8-1ed09a4acf9e",
                            userTypeDescription = "Adult"
                        },
                        new
                        {
                            userTypeId = "a7417183-2193-4977-9a41-a89419da4bce",
                            userTypeDescription = "Child"
                        },
                        new
                        {
                            userTypeId = "9563d067-07f4-4d8f-a98a-f19388fecfd8",
                            userTypeDescription = "Student"
                        },
                        new
                        {
                            userTypeId = "112a64b4-aa15-4d63-94bb-25de3ec8893d",
                            userTypeDescription = "Senior"
                        });
                });

            modelBuilder.Entity("backend.Model.Product.foodInformation", b =>
                {
                    b.Property<string>("foodInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("foodInformationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("foodPrice")
                        .HasColumnType("bigint");

                    b.HasKey("foodInformationId");

                    b.ToTable("foodInformation");

                    b.HasData(
                        new
                        {
                            foodInformationId = "fb5f120e-a69d-4df0-b048-9dcaad789261",
                            foodInformationName = "Popcorn Medium",
                            foodPrice = 50000L
                        },
                        new
                        {
                            foodInformationId = "f30816cf-9519-4198-9707-06860d7d2eb9",
                            foodInformationName = "Coca-Cola",
                            foodPrice = 30000L
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userRoleInformation", b =>
                {
                    b.HasOne("backend.Model.Auth.roleInformation", "roleInformation")
                        .WithMany("userRoleInformation")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("userRoleInformation")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("roleInformation");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.Order", b =>
                {
                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("Order")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailFood", b =>
                {
                    b.HasOne("backend.Model.Product.foodInformation", "foodInformation")
                        .WithMany()
                        .HasForeignKey("foodInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Booking.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("foodInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailTicket", b =>
                {
                    b.HasOne("backend.Model.Booking.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.priceInformation", "priceInformation")
                        .WithMany()
                        .HasForeignKey("priceInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.CinemaRoom.Seats", "Seats")
                        .WithMany()
                        .HasForeignKey("seatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Seats");

                    b.Navigation("priceInformation");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.Seats", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("Seats")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.HasOne("backend.Model.Cinemas.Cinema", "Cinema")
                        .WithMany("cinemaRoom")
                        .HasForeignKey("cinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cleaningStatus", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("cleaningStatus")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("cleaningStatus")
                        .HasForeignKey("userInformationuserId");

                    b.Navigation("cinemaRoom");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Cinemas.cinemaMovieInformation", b =>
                {
                    b.HasOne("backend.Model.Cinemas.Cinema", "Cinema")
                        .WithMany("cinemaMovieInformation")
                        .HasForeignKey("cinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("cinemaMovieInformation")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieCommentDetail", b =>
                {
                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieCommentDetail")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("movieCommentDetail")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieInformation");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenreInformation", b =>
                {
                    b.HasOne("backend.Model.Movie.movieGenre", "movieGenre")
                        .WithMany()
                        .HasForeignKey("movieGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany()
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieGenre");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.HasOne("backend.Model.Movie.Language", "Language")
                        .WithMany("movieInformation")
                        .HasForeignKey("languageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieVisualFormat", "movieVisualFormat")
                        .WithMany("movieInformation")
                        .HasForeignKey("movieVisualFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("movieVisualFormat");
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("movieSchedule")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieSchedule")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Price.priceInformation", b =>
                {
                    b.HasOne("backend.Model.Movie.movieVisualFormat", "movieVisualFormat")
                        .WithMany("priceInformation")
                        .HasForeignKey("movieVisualFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.userType", "userType")
                        .WithMany("priceInformation")
                        .HasForeignKey("userTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieVisualFormat");

                    b.Navigation("userType");
                });

            modelBuilder.Entity("backend.Model.Auth.roleInformation", b =>
                {
                    b.Navigation("userRoleInformation");
                });

            modelBuilder.Entity("backend.Model.Auth.userInformation", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("cleaningStatus");

                    b.Navigation("movieCommentDetail");

                    b.Navigation("userRoleInformation");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("cleaningStatus");

                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.Cinemas.Cinema", b =>
                {
                    b.Navigation("cinemaMovieInformation");

                    b.Navigation("cinemaRoom");
                });

            modelBuilder.Entity("backend.Model.Movie.Language", b =>
                {
                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.Navigation("cinemaMovieInformation");

                    b.Navigation("movieCommentDetail");

                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormat", b =>
                {
                    b.Navigation("movieInformation");

                    b.Navigation("priceInformation");
                });

            modelBuilder.Entity("backend.Model.Price.userType", b =>
                {
                    b.Navigation("priceInformation");
                });
#pragma warning restore 612, 618
        }
    }
}

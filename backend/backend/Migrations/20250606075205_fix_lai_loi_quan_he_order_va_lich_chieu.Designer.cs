// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250606075205_fix_lai_loi_quan_he_order_va_lich_chieu")]
    partial class fix_lai_loi_quan_he_order_va_lich_chieu
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Model.Auth.roleInformation", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("roleId");

                    b.ToTable("roleInformation");

                    b.HasData(
                        new
                        {
                            roleId = "ba5cbad7-6826-44d6-9138-146fc16e1180",
                            roleName = "Director"
                        },
                        new
                        {
                            roleId = "8f234bc4-4cf8-4c9c-bc52-3c62b2d1afb0",
                            roleName = "Cashier Staff"
                        },
                        new
                        {
                            roleId = "d6227927-eccf-4590-a9a1-0d8f4377eeea",
                            roleName = "Cleaning Staff"
                        },
                        new
                        {
                            roleId = "d4d98450-b0f3-4ab4-b06c-3e0c3cd50af2",
                            roleName = "Ticket Inspector Staff"
                        },
                        new
                        {
                            roleId = "a042270e-6eb0-4fda-892c-c4bdbaf8f760",
                            roleName = "Customer"
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userInformation", b =>
                {
                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IdentityCode")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("loginUserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("loginUserPassword")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("userPoint")
                        .HasColumnType("int");

                    b.HasKey("userId");

                    b.ToTable("userInformation");

                    b.HasData(
                        new
                        {
                            userId = "f464b057-8d9f-448a-a795-af47f90c4aa3",
                            IdentityCode = "123456789012",
                            dateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            loginUserEmail = "admin@example.com",
                            loginUserPassword = "password123",
                            phoneNumber = "0912345678",
                            userName = "Admin User",
                            userPoint = 1000
                        },
                        new
                        {
                            userId = "f18938fa-2965-4b52-9359-52f3fadfa110",
                            IdentityCode = "012345678901",
                            dateOfBirth = new DateTime(1995, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            loginUserEmail = "customer1@example.com",
                            loginUserPassword = "password123",
                            phoneNumber = "0987654321",
                            userName = "Nguyen Van A",
                            userPoint = 250
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userRoleInformation", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("roleId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("userRoleInformation");

                    b.HasData(
                        new
                        {
                            roleId = "ba5cbad7-6826-44d6-9138-146fc16e1180",
                            userId = "f464b057-8d9f-448a-a795-af47f90c4aa3"
                        },
                        new
                        {
                            roleId = "a042270e-6eb0-4fda-892c-c4bdbaf8f760",
                            userId = "f18938fa-2965-4b52-9359-52f3fadfa110"
                        });
                });

            modelBuilder.Entity("backend.Model.Booking.Order", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("isPay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<long>("totalAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("orderId");

                    b.HasIndex("userId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailFood", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("foodInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("quanlity")
                        .HasColumnType("int");

                    b.HasKey("orderId", "foodInformationId");

                    b.HasIndex("foodInformationId");

                    b.ToTable("orderDetailFood");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailTicket", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("seatsId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("priceInformationId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieScheduleID")
                        .HasColumnType("varchar(100)");

                    b.HasKey("orderId", "seatsId", "priceInformationId", "movieScheduleID");

                    b.HasIndex("movieScheduleID");

                    b.HasIndex("priceInformationId");

                    b.HasIndex("seatsId");

                    b.ToTable("orderDetail");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.Seats", b =>
                {
                    b.Property<string>("seatsId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("isMiddle")
                        .HasColumnType("bit");

                    b.Property<bool>("isTaken")
                        .HasColumnType("bit");

                    b.Property<string>("seatsNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("seatsId");

                    b.HasIndex("cinemaRoomId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            seatsId = "5da491a8-031c-4776-9651-2f48ede3da3b",
                            cinemaRoomId = "dd15d331-f2e0-47ee-9f82-7d97842951b5",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "A1"
                        },
                        new
                        {
                            seatsId = "04efd62e-b1c8-4c15-ba35-099fc0a5a23e",
                            cinemaRoomId = "dd15d331-f2e0-47ee-9f82-7d97842951b5",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "A2"
                        },
                        new
                        {
                            seatsId = "1a4d8554-83b0-4bed-888a-e2abff6fcc51",
                            cinemaRoomId = "dd15d331-f2e0-47ee-9f82-7d97842951b5",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "B1"
                        },
                        new
                        {
                            seatsId = "4fa895e8-28f9-44d2-8ea2-947c2a876a66",
                            cinemaRoomId = "dd15d331-f2e0-47ee-9f82-7d97842951b5",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "B2"
                        },
                        new
                        {
                            seatsId = "1ee10d90-962a-4f43-9cbe-02c4198f8fd7",
                            cinemaRoomId = "4af944bb-4112-43f3-aee4-9801ad36c41f",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "C1"
                        },
                        new
                        {
                            seatsId = "c6e53801-9cc5-4d72-8cdd-918524726fe6",
                            cinemaRoomId = "4af944bb-4112-43f3-aee4-9801ad36c41f",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "C2"
                        },
                        new
                        {
                            seatsId = "9dc6929a-bbe0-43f5-98f5-8ba45c4b36e2",
                            cinemaRoomId = "0a91a11d-2fd4-42b9-bbe5-8c4138c5ac12",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "D1"
                        },
                        new
                        {
                            seatsId = "ec09d81a-923d-44bd-9229-f67c231db9dd",
                            cinemaRoomId = "0a91a11d-2fd4-42b9-bbe5-8c4138c5ac12",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "D2"
                        });
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.Property<string>("cinemaRoomId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("cinemaRoomNumber")
                        .HasColumnType("int");

                    b.Property<bool>("isIMAXRoom")
                        .HasColumnType("bit");

                    b.HasKey("cinemaRoomId");

                    b.HasIndex("cinemaId");

                    b.ToTable("cinemaRoom");

                    b.HasData(
                        new
                        {
                            cinemaRoomId = "dd15d331-f2e0-47ee-9f82-7d97842951b5",
                            cinemaId = "bb698c11-2563-4a5c-b0b7-6fcaed4f4198",
                            cinemaRoomNumber = 1,
                            isIMAXRoom = false
                        },
                        new
                        {
                            cinemaRoomId = "4af944bb-4112-43f3-aee4-9801ad36c41f",
                            cinemaId = "bb698c11-2563-4a5c-b0b7-6fcaed4f4198",
                            cinemaRoomNumber = 2,
                            isIMAXRoom = false
                        },
                        new
                        {
                            cinemaRoomId = "0a91a11d-2fd4-42b9-bbe5-8c4138c5ac12",
                            cinemaId = "dfef449f-fbc9-4c42-bd2e-a03c640e713d",
                            cinemaRoomNumber = 1,
                            isIMAXRoom = false
                        });
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cleaningStatus", b =>
                {
                    b.Property<string>("roomID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("staffID")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("startedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("endedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("userInformationuserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("roomID", "staffID", "startedTime");

                    b.HasIndex("cinemaRoomId");

                    b.HasIndex("userInformationuserId");

                    b.ToTable("cleaningStatus");
                });

            modelBuilder.Entity("backend.Model.Cinemas.Cinema", b =>
                {
                    b.Property<string>("cinemaId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaContactHotlineNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("cinemaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cinemaLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("cinemaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("isSupportedIMAX")
                        .HasColumnType("bit");

                    b.HasKey("cinemaId");

                    b.ToTable("Cinema");

                    b.HasData(
                        new
                        {
                            cinemaId = "bb698c11-2563-4a5c-b0b7-6fcaed4f4198",
                            cinemaContactHotlineNumber = "0901234567",
                            cinemaDescription = "A modern cinema with multiple screens.",
                            cinemaLocation = "19 Cao Thang",
                            cinemaName = "Mega GS Cao Thang",
                            isSupportedIMAX = false
                        },
                        new
                        {
                            cinemaId = "dfef449f-fbc9-4c42-bd2e-a03c640e713d",
                            cinemaContactHotlineNumber = "0907654321",
                            cinemaDescription = "Comfortable seating and great sound system.",
                            cinemaLocation = "12 Cantavil",
                            cinemaName = "Lotte Cinema Cantavil",
                            isSupportedIMAX = false
                        });
                });

            modelBuilder.Entity("backend.Model.Cinemas.cinemaMovieInformation", b =>
                {
                    b.Property<string>("cinemaId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("cinemaId", "movieId");

                    b.HasIndex("movieId");

                    b.ToTable("cinemaMovieInformation");

                    b.HasData(
                        new
                        {
                            cinemaId = "bb698c11-2563-4a5c-b0b7-6fcaed4f4198",
                            movieId = "c26bd955-282b-4442-9d16-9260b33e9767"
                        },
                        new
                        {
                            cinemaId = "bb698c11-2563-4a5c-b0b7-6fcaed4f4198",
                            movieId = "90a52968-1803-4830-975a-bc6bc2cc1bc4"
                        },
                        new
                        {
                            cinemaId = "dfef449f-fbc9-4c42-bd2e-a03c640e713d",
                            movieId = "c26bd955-282b-4442-9d16-9260b33e9767"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.Language", b =>
                {
                    b.Property<string>("languageId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("languageDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("languageId");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            languageId = "a5772b69-0596-4d0e-98fc-66d9b033f163",
                            languageDetail = "English"
                        },
                        new
                        {
                            languageId = "b69a2654-a7ac-4c86-881f-d7a3bc35c25e",
                            languageDetail = "Vietnamese"
                        },
                        new
                        {
                            languageId = "829fc466-467a-48d1-b15e-094f62ebdb6f",
                            languageDetail = "Korean"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieCommentDetail", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userCommentDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("movieId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("movieCommentDetail");
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenre", b =>
                {
                    b.Property<string>("movieGenreId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieGenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("movieGenreId");

                    b.ToTable("movieGenre");

                    b.HasData(
                        new
                        {
                            movieGenreId = "78f46894-626a-4ecd-b1cb-6744f05bdd78",
                            movieGenreName = "Action"
                        },
                        new
                        {
                            movieGenreId = "a08e36b9-d7c8-441a-8dcf-8da1725fb197",
                            movieGenreName = "Comedy"
                        },
                        new
                        {
                            movieGenreId = "bfe5d6f5-7384-486e-9cf8-d7400ad1d3b3",
                            movieGenreName = "Horror"
                        },
                        new
                        {
                            movieGenreId = "57e7b3d8-52a2-4381-b706-6886a220b5aa",
                            movieGenreName = "Drama"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenreInformation", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieGenreId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("movieId", "movieGenreId");

                    b.HasIndex("movieGenreId");

                    b.ToTable("movieGenreInformation");

                    b.HasData(
                        new
                        {
                            movieId = "c26bd955-282b-4442-9d16-9260b33e9767",
                            movieGenreId = "78f46894-626a-4ecd-b1cb-6744f05bdd78"
                        },
                        new
                        {
                            movieId = "c26bd955-282b-4442-9d16-9260b33e9767",
                            movieGenreId = "57e7b3d8-52a2-4381-b706-6886a220b5aa"
                        },
                        new
                        {
                            movieId = "90a52968-1803-4830-975a-bc6bc2cc1bc4",
                            movieGenreId = "78f46894-626a-4ecd-b1cb-6744f05bdd78"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("languageId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieActor")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("movieDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("movieDirector")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("movieDuration")
                        .HasColumnType("int");

                    b.Property<byte[]>("movieImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("movieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("movieTrailerUrl")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<string>("movieVisualFormatId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("movieId");

                    b.HasIndex("languageId");

                    b.HasIndex("movieVisualFormatId");

                    b.ToTable("movieInformation");

                    b.HasData(
                        new
                        {
                            movieId = "c26bd955-282b-4442-9d16-9260b33e9767",
                            languageId = "a5772b69-0596-4d0e-98fc-66d9b033f163",
                            movieActor = "Timothée Chalamet, Zendaya, Rebecca Ferguson",
                            movieDescription = "Paul Atreides unites with Chani and the Fremen while seeking revenge against those who destroyed his family.",
                            movieDirector = "Denis Villeneuve",
                            movieDuration = 166,
                            movieImage = new byte[] { 100, 117, 110, 101, 50, 95, 105, 109, 97, 103, 101, 95, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114 },
                            movieName = "Dune: Part Two",
                            movieTrailerUrl = "https://www.youtube.com/watch?v=Way9Dexny3w",
                            movieVisualFormatId = "81ffdf8f-b3c4-4b10-b9c8-2ebb6727c759"
                        },
                        new
                        {
                            movieId = "90a52968-1803-4830-975a-bc6bc2cc1bc4",
                            languageId = "a5772b69-0596-4d0e-98fc-66d9b033f163",
                            movieActor = "Rebecca Hall, Brian Tyree Henry, Dan Stevens",
                            movieDescription = "Godzilla and Kong must unite to fight a colossal undiscovered threat hidden within our world.",
                            movieDirector = "Adam Wingard",
                            movieDuration = 115,
                            movieImage = new byte[] { 103, 111, 100, 122, 105, 108, 108, 97, 120, 107, 111, 110, 103, 95, 105, 109, 97, 103, 101, 95, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114 },
                            movieName = "Godzilla x Kong: The New Empire",
                            movieTrailerUrl = "https://www.youtube.com/watch?v=EOk9z-WbN5o",
                            movieVisualFormatId = "fc30fed4-3cce-4388-8797-c134c3b0827c"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.Property<string>("movieScheduleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("showDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("movieScheduleId");

                    b.HasIndex("cinemaRoomId");

                    b.HasIndex("movieId");

                    b.ToTable("movieSchedule");

                    b.HasData(
                        new
                        {
                            movieScheduleId = "5fbc3459-e3dc-48f5-86e9-ff19a21fd64c",
                            cinemaRoomId = "dd15d331-f2e0-47ee-9f82-7d97842951b5",
                            movieId = "c26bd955-282b-4442-9d16-9260b33e9767",
                            showDateTime = new DateTime(2025, 6, 5, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            movieScheduleId = "fed5fc2f-ec2c-45e6-9d67-34f2d47d94ae",
                            cinemaRoomId = "dd15d331-f2e0-47ee-9f82-7d97842951b5",
                            movieId = "90a52968-1803-4830-975a-bc6bc2cc1bc4",
                            showDateTime = new DateTime(2025, 6, 5, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            movieScheduleId = "412e2f36-4b71-4ce0-a7e9-08c6b8862320",
                            cinemaRoomId = "0a91a11d-2fd4-42b9-bbe5-8c4138c5ac12",
                            movieId = "c26bd955-282b-4442-9d16-9260b33e9767",
                            showDateTime = new DateTime(2025, 6, 6, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormat", b =>
                {
                    b.Property<string>("movieVisualFormatId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("movieVisualFormatId");

                    b.ToTable("movieVisualFormat");

                    b.HasData(
                        new
                        {
                            movieVisualFormatId = "81ffdf8f-b3c4-4b10-b9c8-2ebb6727c759",
                            movieVisualFormatName = "2D"
                        },
                        new
                        {
                            movieVisualFormatId = "fc30fed4-3cce-4388-8797-c134c3b0827c",
                            movieVisualFormatName = "3D"
                        },
                        new
                        {
                            movieVisualFormatId = "98d710aa-29b9-48c2-a68d-ae7595be3bb6",
                            movieVisualFormatName = "IMAX"
                        });
                });

            modelBuilder.Entity("backend.Model.Price.priceInformation", b =>
                {
                    b.Property<string>("priceInformationId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<long>("priceAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("userTypeId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("priceInformationId");

                    b.HasIndex("movieVisualFormatId");

                    b.HasIndex("userTypeId");

                    b.ToTable("priceInformation");

                    b.HasData(
                        new
                        {
                            priceInformationId = "ecd98edd-c55a-4ebc-9447-87033a3e756c",
                            movieVisualFormatId = "81ffdf8f-b3c4-4b10-b9c8-2ebb6727c759",
                            priceAmount = 100000L,
                            userTypeId = "9b8b9a79-5b46-4e96-9732-6cdf43049d6e"
                        },
                        new
                        {
                            priceInformationId = "7c7b52a9-90da-4954-acf5-a0c6e9602972",
                            movieVisualFormatId = "81ffdf8f-b3c4-4b10-b9c8-2ebb6727c759",
                            priceAmount = 70000L,
                            userTypeId = "e39198f1-60b6-416a-96ad-f15359808202"
                        },
                        new
                        {
                            priceInformationId = "74025653-b274-4b00-b89d-d237befb5d79",
                            movieVisualFormatId = "fc30fed4-3cce-4388-8797-c134c3b0827c",
                            priceAmount = 130000L,
                            userTypeId = "9b8b9a79-5b46-4e96-9732-6cdf43049d6e"
                        });
                });

            modelBuilder.Entity("backend.Model.Price.userType", b =>
                {
                    b.Property<string>("userTypeId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("userTypeId");

                    b.ToTable("userType");

                    b.HasData(
                        new
                        {
                            userTypeId = "9b8b9a79-5b46-4e96-9732-6cdf43049d6e",
                            userTypeDescription = "Adult"
                        },
                        new
                        {
                            userTypeId = "e39198f1-60b6-416a-96ad-f15359808202",
                            userTypeDescription = "Child"
                        },
                        new
                        {
                            userTypeId = "a0d4198b-c9b3-4c25-afbf-82a726e63474",
                            userTypeDescription = "Student"
                        },
                        new
                        {
                            userTypeId = "82af00d6-8b5a-4a31-85cd-a7b225012bc9",
                            userTypeDescription = "Senior"
                        });
                });

            modelBuilder.Entity("backend.Model.Product.foodInformation", b =>
                {
                    b.Property<string>("foodInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("foodInformationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("foodPrice")
                        .HasColumnType("bigint");

                    b.HasKey("foodInformationId");

                    b.ToTable("foodInformation");

                    b.HasData(
                        new
                        {
                            foodInformationId = "70ec52f1-09ec-4737-8609-aebda2d140b5",
                            foodInformationName = "Popcorn Medium",
                            foodPrice = 50000L
                        },
                        new
                        {
                            foodInformationId = "c8cf534a-5ca9-43c1-a741-de31c904402f",
                            foodInformationName = "Coca-Cola",
                            foodPrice = 30000L
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userRoleInformation", b =>
                {
                    b.HasOne("backend.Model.Auth.roleInformation", "roleInformation")
                        .WithMany("userRoleInformation")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("userRoleInformation")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("roleInformation");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.Order", b =>
                {
                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("Order")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailFood", b =>
                {
                    b.HasOne("backend.Model.Product.foodInformation", "foodInformation")
                        .WithMany()
                        .HasForeignKey("foodInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Booking.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("foodInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailTicket", b =>
                {
                    b.HasOne("backend.Model.Movie.movieSchedule", "movieSchedule")
                        .WithMany("orderDetailTicket")
                        .HasForeignKey("movieScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Booking.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.priceInformation", "priceInformation")
                        .WithMany()
                        .HasForeignKey("priceInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.CinemaRoom.Seats", "Seats")
                        .WithMany()
                        .HasForeignKey("seatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Seats");

                    b.Navigation("movieSchedule");

                    b.Navigation("priceInformation");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.Seats", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("Seats")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.HasOne("backend.Model.Cinemas.Cinema", "Cinema")
                        .WithMany("cinemaRoom")
                        .HasForeignKey("cinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cleaningStatus", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("cleaningStatus")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("cleaningStatus")
                        .HasForeignKey("userInformationuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Cinemas.cinemaMovieInformation", b =>
                {
                    b.HasOne("backend.Model.Cinemas.Cinema", "Cinema")
                        .WithMany("cinemaMovieInformation")
                        .HasForeignKey("cinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("cinemaMovieInformation")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieCommentDetail", b =>
                {
                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieCommentDetail")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("movieCommentDetail")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieInformation");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenreInformation", b =>
                {
                    b.HasOne("backend.Model.Movie.movieGenre", "movieGenre")
                        .WithMany()
                        .HasForeignKey("movieGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany()
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieGenre");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.HasOne("backend.Model.Movie.Language", "Language")
                        .WithMany("movieInformation")
                        .HasForeignKey("languageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieVisualFormat", "movieVisualFormat")
                        .WithMany("movieInformation")
                        .HasForeignKey("movieVisualFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("movieVisualFormat");
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("movieSchedule")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieSchedule")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Price.priceInformation", b =>
                {
                    b.HasOne("backend.Model.Movie.movieVisualFormat", "movieVisualFormat")
                        .WithMany("priceInformation")
                        .HasForeignKey("movieVisualFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.userType", "userType")
                        .WithMany("priceInformation")
                        .HasForeignKey("userTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieVisualFormat");

                    b.Navigation("userType");
                });

            modelBuilder.Entity("backend.Model.Auth.roleInformation", b =>
                {
                    b.Navigation("userRoleInformation");
                });

            modelBuilder.Entity("backend.Model.Auth.userInformation", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("cleaningStatus");

                    b.Navigation("movieCommentDetail");

                    b.Navigation("userRoleInformation");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("cleaningStatus");

                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.Cinemas.Cinema", b =>
                {
                    b.Navigation("cinemaMovieInformation");

                    b.Navigation("cinemaRoom");
                });

            modelBuilder.Entity("backend.Model.Movie.Language", b =>
                {
                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.Navigation("cinemaMovieInformation");

                    b.Navigation("movieCommentDetail");

                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.Navigation("orderDetailTicket");
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormat", b =>
                {
                    b.Navigation("movieInformation");

                    b.Navigation("priceInformation");
                });

            modelBuilder.Entity("backend.Model.Price.userType", b =>
                {
                    b.Navigation("priceInformation");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250611065546_fix_lai_logic_phim_va_dinh_dang_the_loai_hinh_anh")]
    partial class fix_lai_logic_phim_va_dinh_dang_the_loai_hinh_anh
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Model.Auth.roleInformation", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("roleId");

                    b.ToTable("roleInformation");

                    b.HasData(
                        new
                        {
                            roleId = "0a80ebf7-b7a8-4c3d-8c42-2deadd79577a",
                            roleName = "Director"
                        },
                        new
                        {
                            roleId = "500fa21c-f78b-4e00-85fb-ab4cc3e90fe5",
                            roleName = "Cashier Staff"
                        },
                        new
                        {
                            roleId = "a38659aa-cb71-42c8-a9e0-4f060d543297",
                            roleName = "Cleaning Staff"
                        },
                        new
                        {
                            roleId = "13ccbb3c-9d09-42b8-9df0-918677713ffc",
                            roleName = "Ticket Inspector Staff"
                        },
                        new
                        {
                            roleId = "0a6a39c5-4fbd-47e9-bf8e-539febaf7c0b",
                            roleName = "Customer"
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userInformation", b =>
                {
                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IdentityCode")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("loginUserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("loginUserPassword")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("userPoint")
                        .HasColumnType("int");

                    b.HasKey("userId");

                    b.ToTable("userInformation");

                    b.HasData(
                        new
                        {
                            userId = "075e5d13-b126-474a-bbd7-c2ba365bfe02",
                            IdentityCode = "123456789012",
                            dateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            loginUserEmail = "admin@example.com",
                            loginUserPassword = "password123",
                            phoneNumber = "0912345678",
                            userName = "Admin User",
                            userPoint = 1000
                        },
                        new
                        {
                            userId = "e8b8cf78-64a4-4054-ac10-c88eb35fbb8e",
                            IdentityCode = "012345678901",
                            dateOfBirth = new DateTime(1995, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            loginUserEmail = "customer1@example.com",
                            loginUserPassword = "password123",
                            phoneNumber = "0987654321",
                            userName = "Nguyen Van A",
                            userPoint = 250
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userRoleInformation", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("roleId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("userRoleInformation");

                    b.HasData(
                        new
                        {
                            roleId = "0a80ebf7-b7a8-4c3d-8c42-2deadd79577a",
                            userId = "075e5d13-b126-474a-bbd7-c2ba365bfe02"
                        },
                        new
                        {
                            roleId = "0a6a39c5-4fbd-47e9-bf8e-539febaf7c0b",
                            userId = "e8b8cf78-64a4-4054-ac10-c88eb35fbb8e"
                        });
                });

            modelBuilder.Entity("backend.Model.Booking.Order", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("isPay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<long>("totalAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("orderId");

                    b.HasIndex("userId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailFood", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("foodInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("quanlity")
                        .HasColumnType("int");

                    b.HasKey("orderId", "foodInformationId");

                    b.HasIndex("foodInformationId");

                    b.ToTable("orderDetailFood");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailTicket", b =>
                {
                    b.Property<string>("seatsId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieScheduleID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("orderId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("priceInformationId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("seatsId", "movieScheduleID");

                    b.HasIndex("movieScheduleID");

                    b.HasIndex("orderId");

                    b.HasIndex("priceInformationId");

                    b.ToTable("orderDetail");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.Seats", b =>
                {
                    b.Property<string>("seatsId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("isMiddle")
                        .HasColumnType("bit");

                    b.Property<bool>("isTaken")
                        .HasColumnType("bit");

                    b.Property<string>("seatsNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("seatsId");

                    b.HasIndex("cinemaRoomId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            seatsId = "9d63e8d5-0415-4b06-a273-202496bb9736",
                            cinemaRoomId = "14610f15-7b6b-47ed-8d22-e3f5c7f5ed37",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "A1"
                        },
                        new
                        {
                            seatsId = "1b495104-b4aa-4f41-a36c-46032d99bfa1",
                            cinemaRoomId = "14610f15-7b6b-47ed-8d22-e3f5c7f5ed37",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "A2"
                        },
                        new
                        {
                            seatsId = "4808b47a-c740-4a57-9f09-eef29b5a9d40",
                            cinemaRoomId = "14610f15-7b6b-47ed-8d22-e3f5c7f5ed37",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "B1"
                        },
                        new
                        {
                            seatsId = "8104ec2b-929e-48f3-8ac5-3de5ea3dc850",
                            cinemaRoomId = "14610f15-7b6b-47ed-8d22-e3f5c7f5ed37",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "B2"
                        },
                        new
                        {
                            seatsId = "dc903da8-c9da-463e-839d-15fbf1b05388",
                            cinemaRoomId = "16185d00-56e7-4dcb-875c-0960102cc04c",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "C1"
                        },
                        new
                        {
                            seatsId = "778e2e82-ee8b-4340-be9c-e13134b4b655",
                            cinemaRoomId = "16185d00-56e7-4dcb-875c-0960102cc04c",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "C2"
                        },
                        new
                        {
                            seatsId = "dd8f16bc-4a6e-41bf-9d34-8b615e52294e",
                            cinemaRoomId = "b46bc121-d0fb-451a-a173-4917404006ef",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "D1"
                        },
                        new
                        {
                            seatsId = "0977245c-1e6f-48dc-8116-f9f542f8f4e5",
                            cinemaRoomId = "b46bc121-d0fb-451a-a173-4917404006ef",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "D2"
                        });
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.Property<string>("cinemaRoomId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("cinemaRoomNumber")
                        .HasColumnType("int");

                    b.Property<bool>("isIMAXRoom")
                        .HasColumnType("bit");

                    b.HasKey("cinemaRoomId");

                    b.HasIndex("cinemaId");

                    b.ToTable("cinemaRoom");

                    b.HasData(
                        new
                        {
                            cinemaRoomId = "14610f15-7b6b-47ed-8d22-e3f5c7f5ed37",
                            cinemaId = "b2630aae-dbb9-484a-8f79-739f4a59c503",
                            cinemaRoomNumber = 1,
                            isIMAXRoom = false
                        },
                        new
                        {
                            cinemaRoomId = "16185d00-56e7-4dcb-875c-0960102cc04c",
                            cinemaId = "b2630aae-dbb9-484a-8f79-739f4a59c503",
                            cinemaRoomNumber = 2,
                            isIMAXRoom = false
                        },
                        new
                        {
                            cinemaRoomId = "b46bc121-d0fb-451a-a173-4917404006ef",
                            cinemaId = "3254e5a3-cb1d-45c2-996c-bc33860735e5",
                            cinemaRoomNumber = 1,
                            isIMAXRoom = false
                        });
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cleaningStatus", b =>
                {
                    b.Property<string>("roomID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("staffID")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("startedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("endedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("userInformationuserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("roomID", "staffID", "startedTime");

                    b.HasIndex("cinemaRoomId");

                    b.HasIndex("userInformationuserId");

                    b.ToTable("cleaningStatus");
                });

            modelBuilder.Entity("backend.Model.Cinemas.Cinema", b =>
                {
                    b.Property<string>("cinemaId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaContactHotlineNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("cinemaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cinemaLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("cinemaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("isSupportedIMAX")
                        .HasColumnType("bit");

                    b.HasKey("cinemaId");

                    b.ToTable("Cinema");

                    b.HasData(
                        new
                        {
                            cinemaId = "b2630aae-dbb9-484a-8f79-739f4a59c503",
                            cinemaContactHotlineNumber = "0901234567",
                            cinemaDescription = "A modern cinema with multiple screens.",
                            cinemaLocation = "19 Cao Thang",
                            cinemaName = "Mega GS Cao Thang",
                            isSupportedIMAX = false
                        },
                        new
                        {
                            cinemaId = "3254e5a3-cb1d-45c2-996c-bc33860735e5",
                            cinemaContactHotlineNumber = "0907654321",
                            cinemaDescription = "Comfortable seating and great sound system.",
                            cinemaLocation = "12 Cantavil",
                            cinemaName = "Lotte Cinema Cantavil",
                            isSupportedIMAX = false
                        });
                });

            modelBuilder.Entity("backend.Model.Cinemas.cinemaMovieInformation", b =>
                {
                    b.Property<string>("cinemaId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("cinemaId", "movieId");

                    b.HasIndex("movieId");

                    b.ToTable("cinemaMovieInformation");

                    b.HasData(
                        new
                        {
                            cinemaId = "b2630aae-dbb9-484a-8f79-739f4a59c503",
                            movieId = "abc1f58a-d70c-4918-9ac3-9925e2ba8a53"
                        },
                        new
                        {
                            cinemaId = "b2630aae-dbb9-484a-8f79-739f4a59c503",
                            movieId = "89a9c79e-2684-4f8c-b30b-c916b1b845c7"
                        },
                        new
                        {
                            cinemaId = "3254e5a3-cb1d-45c2-996c-bc33860735e5",
                            movieId = "abc1f58a-d70c-4918-9ac3-9925e2ba8a53"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.Language", b =>
                {
                    b.Property<string>("languageId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("languageDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("languageId");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            languageId = "3554de3e-5218-474b-b33f-bf945a5ee9cd",
                            languageDetail = "English"
                        },
                        new
                        {
                            languageId = "8e9fe372-2805-4684-9c78-7d70c738633c",
                            languageDetail = "Vietnamese"
                        },
                        new
                        {
                            languageId = "ffaaa0f3-d3d5-4fb5-b5ab-e8c8d95616db",
                            languageDetail = "Korean"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieCommentDetail", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userCommentDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("movieId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("movieCommentDetail");
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenre", b =>
                {
                    b.Property<string>("movieGenreId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieGenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("movieGenreId");

                    b.ToTable("movieGenre");

                    b.HasData(
                        new
                        {
                            movieGenreId = "18cef6c0-7505-408d-9430-3c69668d901d",
                            movieGenreName = "Action"
                        },
                        new
                        {
                            movieGenreId = "e1349368-604c-4be9-a172-1ad2bc2b6990",
                            movieGenreName = "Comedy"
                        },
                        new
                        {
                            movieGenreId = "cc36fa8c-0f84-4057-86d1-6153dcabba5b",
                            movieGenreName = "Horror"
                        },
                        new
                        {
                            movieGenreId = "c48b7434-d458-4585-8d25-b7a8d37122ca",
                            movieGenreName = "Drama"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenreInformation", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieGenreId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("movieId", "movieGenreId");

                    b.HasIndex("movieGenreId");

                    b.ToTable("movieGenreInformation");

                    b.HasData(
                        new
                        {
                            movieId = "abc1f58a-d70c-4918-9ac3-9925e2ba8a53",
                            movieGenreId = "18cef6c0-7505-408d-9430-3c69668d901d"
                        },
                        new
                        {
                            movieId = "abc1f58a-d70c-4918-9ac3-9925e2ba8a53",
                            movieGenreId = "c48b7434-d458-4585-8d25-b7a8d37122ca"
                        },
                        new
                        {
                            movieId = "89a9c79e-2684-4f8c-b30b-c916b1b845c7",
                            movieGenreId = "18cef6c0-7505-408d-9430-3c69668d901d"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("languageId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieActor")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("movieDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("movieDirector")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("movieDuration")
                        .HasColumnType("int");

                    b.Property<byte[]>("movieImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("movieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("movieTrailerUrl")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.HasKey("movieId");

                    b.HasIndex("languageId");

                    b.ToTable("movieInformation");

                    b.HasData(
                        new
                        {
                            movieId = "abc1f58a-d70c-4918-9ac3-9925e2ba8a53",
                            languageId = "3554de3e-5218-474b-b33f-bf945a5ee9cd",
                            movieActor = "Timothée Chalamet, Zendaya, Rebecca Ferguson",
                            movieDescription = "Paul Atreides unites with Chani and the Fremen while seeking revenge against those who destroyed his family.",
                            movieDirector = "Denis Villeneuve",
                            movieDuration = 166,
                            movieImage = new byte[] { 100, 117, 110, 101, 50, 95, 105, 109, 97, 103, 101, 95, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114 },
                            movieName = "Dune: Part Two",
                            movieTrailerUrl = "https://www.youtube.com/watch?v=Way9Dexny3w"
                        },
                        new
                        {
                            movieId = "89a9c79e-2684-4f8c-b30b-c916b1b845c7",
                            languageId = "3554de3e-5218-474b-b33f-bf945a5ee9cd",
                            movieActor = "Rebecca Hall, Brian Tyree Henry, Dan Stevens",
                            movieDescription = "Godzilla and Kong must unite to fight a colossal undiscovered threat hidden within our world.",
                            movieDirector = "Adam Wingard",
                            movieDuration = 115,
                            movieImage = new byte[] { 103, 111, 100, 122, 105, 108, 108, 97, 120, 107, 111, 110, 103, 95, 105, 109, 97, 103, 101, 95, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114 },
                            movieName = "Godzilla x Kong: The New Empire",
                            movieTrailerUrl = "https://www.youtube.com/watch?v=EOk9z-WbN5o"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.Property<string>("movieScheduleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("showDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("movieScheduleId");

                    b.HasIndex("cinemaRoomId");

                    b.HasIndex("movieId");

                    b.ToTable("movieSchedule");

                    b.HasData(
                        new
                        {
                            movieScheduleId = "0f53e717-b0a4-4644-bea5-c7c57283a086",
                            cinemaRoomId = "14610f15-7b6b-47ed-8d22-e3f5c7f5ed37",
                            movieId = "abc1f58a-d70c-4918-9ac3-9925e2ba8a53",
                            showDateTime = new DateTime(2025, 6, 5, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            movieScheduleId = "7ab3e2a2-a237-467d-a881-c53cb4b37af9",
                            cinemaRoomId = "14610f15-7b6b-47ed-8d22-e3f5c7f5ed37",
                            movieId = "89a9c79e-2684-4f8c-b30b-c916b1b845c7",
                            showDateTime = new DateTime(2025, 6, 5, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            movieScheduleId = "ed76d002-e703-49f6-8394-24e8b00e6884",
                            cinemaRoomId = "b46bc121-d0fb-451a-a173-4917404006ef",
                            movieId = "abc1f58a-d70c-4918-9ac3-9925e2ba8a53",
                            showDateTime = new DateTime(2025, 6, 6, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormat", b =>
                {
                    b.Property<string>("movieVisualFormatId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("movieVisualFormatId");

                    b.ToTable("movieVisualFormat");

                    b.HasData(
                        new
                        {
                            movieVisualFormatId = "f8624e60-1587-4ed6-aadd-c102bd1c445d",
                            movieVisualFormatName = "2D"
                        },
                        new
                        {
                            movieVisualFormatId = "c1a47ecd-9823-444b-9f66-4c51fcd06e92",
                            movieVisualFormatName = "3D"
                        },
                        new
                        {
                            movieVisualFormatId = "04b58e6a-d65c-43b9-a4f1-3d97a4cd9a09",
                            movieVisualFormatName = "IMAX"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormatDetail", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("movieId", "movieVisualFormatId");

                    b.HasIndex("movieVisualFormatId");

                    b.ToTable("movieVisualFormatDetail");
                });

            modelBuilder.Entity("backend.Model.Price.PriceInformation", b =>
                {
                    b.Property<string>("priceInformationId")
                        .HasColumnType("varchar(100)");

                    b.Property<long>("priceAmount")
                        .HasColumnType("bigint");

                    b.HasKey("priceInformationId");

                    b.ToTable("priceInformation");

                    b.HasData(
                        new
                        {
                            priceInformationId = "4693cc5e-919f-4e36-a2a2-1724dfa99336",
                            priceAmount = 45000L
                        },
                        new
                        {
                            priceInformationId = "bb67604c-7415-4367-8273-96031e8fba85",
                            priceAmount = 70000L
                        });
                });

            modelBuilder.Entity("backend.Model.Price.priceInformationForEachUserFilmType", b =>
                {
                    b.Property<string>("userTypeId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("priceInformationID")
                        .HasColumnType("varchar(100)");

                    b.HasKey("userTypeId", "movieVisualFormatId", "priceInformationID");

                    b.HasIndex("movieVisualFormatId");

                    b.HasIndex("priceInformationID");

                    b.ToTable("priceInformationForEachUserFilmType");
                });

            modelBuilder.Entity("backend.Model.Price.userType", b =>
                {
                    b.Property<string>("userTypeId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("userTypeId");

                    b.ToTable("userType");

                    b.HasData(
                        new
                        {
                            userTypeId = "127bd770-c39f-4f2f-97df-c8911513ffab",
                            userTypeDescription = "Adult"
                        },
                        new
                        {
                            userTypeId = "6616e04b-4220-4efd-a27c-5d4ee528d25d",
                            userTypeDescription = "Child"
                        },
                        new
                        {
                            userTypeId = "afb20919-ae85-4d3b-89d8-21e73d8e6439",
                            userTypeDescription = "Student"
                        },
                        new
                        {
                            userTypeId = "9a86e2d8-f82e-4460-b6ce-cf5f606dfa9c",
                            userTypeDescription = "Senior"
                        });
                });

            modelBuilder.Entity("backend.Model.Product.foodInformation", b =>
                {
                    b.Property<string>("foodInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("foodInformationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("foodPrice")
                        .HasColumnType("bigint");

                    b.HasKey("foodInformationId");

                    b.ToTable("foodInformation");

                    b.HasData(
                        new
                        {
                            foodInformationId = "9b820f95-5680-405d-b525-e82f88052abf",
                            foodInformationName = "Popcorn Medium",
                            foodPrice = 50000L
                        },
                        new
                        {
                            foodInformationId = "761bfbed-9895-4eec-9896-e726cd5c18d7",
                            foodInformationName = "Coca-Cola",
                            foodPrice = 30000L
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userRoleInformation", b =>
                {
                    b.HasOne("backend.Model.Auth.roleInformation", "roleInformation")
                        .WithMany("userRoleInformation")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("userRoleInformation")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("roleInformation");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.Order", b =>
                {
                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("Order")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailFood", b =>
                {
                    b.HasOne("backend.Model.Product.foodInformation", "foodInformation")
                        .WithMany()
                        .HasForeignKey("foodInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Booking.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("foodInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailTicket", b =>
                {
                    b.HasOne("backend.Model.Movie.movieSchedule", "movieSchedule")
                        .WithMany("orderDetailTicket")
                        .HasForeignKey("movieScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Booking.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.PriceInformation", "PriceInformation")
                        .WithMany()
                        .HasForeignKey("priceInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.CinemaRoom.Seats", "Seats")
                        .WithMany()
                        .HasForeignKey("seatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PriceInformation");

                    b.Navigation("Seats");

                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.Seats", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("Seats")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.HasOne("backend.Model.Cinemas.Cinema", "Cinema")
                        .WithMany("cinemaRoom")
                        .HasForeignKey("cinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cleaningStatus", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("cleaningStatus")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("cleaningStatus")
                        .HasForeignKey("userInformationuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Cinemas.cinemaMovieInformation", b =>
                {
                    b.HasOne("backend.Model.Cinemas.Cinema", "Cinema")
                        .WithMany("cinemaMovieInformation")
                        .HasForeignKey("cinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("cinemaMovieInformation")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieCommentDetail", b =>
                {
                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieCommentDetail")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("movieCommentDetail")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieInformation");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenreInformation", b =>
                {
                    b.HasOne("backend.Model.Movie.movieGenre", "movieGenre")
                        .WithMany()
                        .HasForeignKey("movieGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany()
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieGenre");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.HasOne("backend.Model.Movie.Language", "Language")
                        .WithMany("movieInformation")
                        .HasForeignKey("languageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("movieSchedule")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieSchedule")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormatDetail", b =>
                {
                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieVisualFormatDetail")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieVisualFormat", "movieVisualFormat")
                        .WithMany("movieVisualFormatDetail")
                        .HasForeignKey("movieVisualFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieInformation");

                    b.Navigation("movieVisualFormat");
                });

            modelBuilder.Entity("backend.Model.Price.priceInformationForEachUserFilmType", b =>
                {
                    b.HasOne("backend.Model.Movie.movieVisualFormat", "movieVisualFormat")
                        .WithMany("priceInformation")
                        .HasForeignKey("movieVisualFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.PriceInformation", "PriceInformation")
                        .WithMany("priceInformationForEachUserFilmType")
                        .HasForeignKey("priceInformationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.userType", "userType")
                        .WithMany("priceInformation")
                        .HasForeignKey("userTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceInformation");

                    b.Navigation("movieVisualFormat");

                    b.Navigation("userType");
                });

            modelBuilder.Entity("backend.Model.Auth.roleInformation", b =>
                {
                    b.Navigation("userRoleInformation");
                });

            modelBuilder.Entity("backend.Model.Auth.userInformation", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("cleaningStatus");

                    b.Navigation("movieCommentDetail");

                    b.Navigation("userRoleInformation");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("cleaningStatus");

                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.Cinemas.Cinema", b =>
                {
                    b.Navigation("cinemaMovieInformation");

                    b.Navigation("cinemaRoom");
                });

            modelBuilder.Entity("backend.Model.Movie.Language", b =>
                {
                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.Navigation("cinemaMovieInformation");

                    b.Navigation("movieCommentDetail");

                    b.Navigation("movieSchedule");

                    b.Navigation("movieVisualFormatDetail");
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.Navigation("orderDetailTicket");
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormat", b =>
                {
                    b.Navigation("movieVisualFormatDetail");

                    b.Navigation("priceInformation");
                });

            modelBuilder.Entity("backend.Model.Price.PriceInformation", b =>
                {
                    b.Navigation("priceInformationForEachUserFilmType");
                });

            modelBuilder.Entity("backend.Model.Price.userType", b =>
                {
                    b.Navigation("priceInformation");
                });
#pragma warning restore 612, 618
        }
    }
}

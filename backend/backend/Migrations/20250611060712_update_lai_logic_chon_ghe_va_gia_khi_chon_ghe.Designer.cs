// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250611060712_update_lai_logic_chon_ghe_va_gia_khi_chon_ghe")]
    partial class update_lai_logic_chon_ghe_va_gia_khi_chon_ghe
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Model.Auth.roleInformation", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("roleId");

                    b.ToTable("roleInformation");

                    b.HasData(
                        new
                        {
                            roleId = "d68db154-9b91-4add-a7ce-ea3ec61e65de",
                            roleName = "Director"
                        },
                        new
                        {
                            roleId = "79afc6a3-199d-4e22-9950-fdbaf533057f",
                            roleName = "Cashier Staff"
                        },
                        new
                        {
                            roleId = "a675c84c-1f54-4a85-89e6-7bf17e39fca8",
                            roleName = "Cleaning Staff"
                        },
                        new
                        {
                            roleId = "770ea04c-3df4-4894-b335-4bba0086d50d",
                            roleName = "Ticket Inspector Staff"
                        },
                        new
                        {
                            roleId = "1d77d2f0-600a-4685-95c4-b52356a63b83",
                            roleName = "Customer"
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userInformation", b =>
                {
                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IdentityCode")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("loginUserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("loginUserPassword")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("userPoint")
                        .HasColumnType("int");

                    b.HasKey("userId");

                    b.ToTable("userInformation");

                    b.HasData(
                        new
                        {
                            userId = "150f4638-f39e-4c61-bd59-18ec3d90b492",
                            IdentityCode = "123456789012",
                            dateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            loginUserEmail = "admin@example.com",
                            loginUserPassword = "password123",
                            phoneNumber = "0912345678",
                            userName = "Admin User",
                            userPoint = 1000
                        },
                        new
                        {
                            userId = "bfdbb6d6-aba6-44d8-930e-e17d6e7b5d3d",
                            IdentityCode = "012345678901",
                            dateOfBirth = new DateTime(1995, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            loginUserEmail = "customer1@example.com",
                            loginUserPassword = "password123",
                            phoneNumber = "0987654321",
                            userName = "Nguyen Van A",
                            userPoint = 250
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userRoleInformation", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("roleId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("userRoleInformation");

                    b.HasData(
                        new
                        {
                            roleId = "d68db154-9b91-4add-a7ce-ea3ec61e65de",
                            userId = "150f4638-f39e-4c61-bd59-18ec3d90b492"
                        },
                        new
                        {
                            roleId = "1d77d2f0-600a-4685-95c4-b52356a63b83",
                            userId = "bfdbb6d6-aba6-44d8-930e-e17d6e7b5d3d"
                        });
                });

            modelBuilder.Entity("backend.Model.Booking.Order", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("isPay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<long>("totalAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("orderId");

                    b.HasIndex("userId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailFood", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("foodInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("quanlity")
                        .HasColumnType("int");

                    b.HasKey("orderId", "foodInformationId");

                    b.HasIndex("foodInformationId");

                    b.ToTable("orderDetailFood");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailTicket", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("seatsId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("priceInformationId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieScheduleID")
                        .HasColumnType("varchar(100)");

                    b.HasKey("orderId", "seatsId", "priceInformationId", "movieScheduleID");

                    b.HasIndex("movieScheduleID");

                    b.HasIndex("priceInformationId");

                    b.HasIndex("seatsId");

                    b.ToTable("orderDetail");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.Seats", b =>
                {
                    b.Property<string>("seatsId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("isMiddle")
                        .HasColumnType("bit");

                    b.Property<bool>("isTaken")
                        .HasColumnType("bit");

                    b.Property<string>("seatsNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("seatsId");

                    b.HasIndex("cinemaRoomId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            seatsId = "60edb564-2ace-4040-9db6-c7a8a899ab92",
                            cinemaRoomId = "61b5b1a8-8660-4332-8e96-08de8fa569ee",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "A1"
                        },
                        new
                        {
                            seatsId = "279e7272-551d-457b-b749-47f82da8730d",
                            cinemaRoomId = "61b5b1a8-8660-4332-8e96-08de8fa569ee",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "A2"
                        },
                        new
                        {
                            seatsId = "82729a94-56dd-4205-b9af-1335bcc913e3",
                            cinemaRoomId = "61b5b1a8-8660-4332-8e96-08de8fa569ee",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "B1"
                        },
                        new
                        {
                            seatsId = "0205defa-f115-4812-b381-817cbaca9ea1",
                            cinemaRoomId = "61b5b1a8-8660-4332-8e96-08de8fa569ee",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "B2"
                        },
                        new
                        {
                            seatsId = "2d40c43c-b29f-498d-a14d-84a79dbd816f",
                            cinemaRoomId = "b19c0048-288d-400a-a9ea-e914667c69e9",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "C1"
                        },
                        new
                        {
                            seatsId = "db657faf-1059-4925-a825-5b37832e3bb3",
                            cinemaRoomId = "b19c0048-288d-400a-a9ea-e914667c69e9",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "C2"
                        },
                        new
                        {
                            seatsId = "098e0dcd-7ff8-45e2-a554-e66ea37d68d9",
                            cinemaRoomId = "f3fa182b-2a5f-4498-9802-b508c0f30957",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "D1"
                        },
                        new
                        {
                            seatsId = "c6c80b3e-fdb8-474f-a2ab-e65df51f4f51",
                            cinemaRoomId = "f3fa182b-2a5f-4498-9802-b508c0f30957",
                            isMiddle = false,
                            isTaken = false,
                            seatsNumber = "D2"
                        });
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.Property<string>("cinemaRoomId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("cinemaRoomNumber")
                        .HasColumnType("int");

                    b.Property<bool>("isIMAXRoom")
                        .HasColumnType("bit");

                    b.HasKey("cinemaRoomId");

                    b.HasIndex("cinemaId");

                    b.ToTable("cinemaRoom");

                    b.HasData(
                        new
                        {
                            cinemaRoomId = "61b5b1a8-8660-4332-8e96-08de8fa569ee",
                            cinemaId = "6f9ca402-d953-462b-ab12-b28b05a49808",
                            cinemaRoomNumber = 1,
                            isIMAXRoom = false
                        },
                        new
                        {
                            cinemaRoomId = "b19c0048-288d-400a-a9ea-e914667c69e9",
                            cinemaId = "6f9ca402-d953-462b-ab12-b28b05a49808",
                            cinemaRoomNumber = 2,
                            isIMAXRoom = false
                        },
                        new
                        {
                            cinemaRoomId = "f3fa182b-2a5f-4498-9802-b508c0f30957",
                            cinemaId = "8abd9fb0-1947-42e6-a662-aac5706e98fe",
                            cinemaRoomNumber = 1,
                            isIMAXRoom = false
                        });
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cleaningStatus", b =>
                {
                    b.Property<string>("roomID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("staffID")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("startedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("endedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("userInformationuserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("roomID", "staffID", "startedTime");

                    b.HasIndex("cinemaRoomId");

                    b.HasIndex("userInformationuserId");

                    b.ToTable("cleaningStatus");
                });

            modelBuilder.Entity("backend.Model.Cinemas.Cinema", b =>
                {
                    b.Property<string>("cinemaId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaContactHotlineNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("cinemaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cinemaLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("cinemaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("isSupportedIMAX")
                        .HasColumnType("bit");

                    b.HasKey("cinemaId");

                    b.ToTable("Cinema");

                    b.HasData(
                        new
                        {
                            cinemaId = "6f9ca402-d953-462b-ab12-b28b05a49808",
                            cinemaContactHotlineNumber = "0901234567",
                            cinemaDescription = "A modern cinema with multiple screens.",
                            cinemaLocation = "19 Cao Thang",
                            cinemaName = "Mega GS Cao Thang",
                            isSupportedIMAX = false
                        },
                        new
                        {
                            cinemaId = "8abd9fb0-1947-42e6-a662-aac5706e98fe",
                            cinemaContactHotlineNumber = "0907654321",
                            cinemaDescription = "Comfortable seating and great sound system.",
                            cinemaLocation = "12 Cantavil",
                            cinemaName = "Lotte Cinema Cantavil",
                            isSupportedIMAX = false
                        });
                });

            modelBuilder.Entity("backend.Model.Cinemas.cinemaMovieInformation", b =>
                {
                    b.Property<string>("cinemaId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("cinemaId", "movieId");

                    b.HasIndex("movieId");

                    b.ToTable("cinemaMovieInformation");

                    b.HasData(
                        new
                        {
                            cinemaId = "6f9ca402-d953-462b-ab12-b28b05a49808",
                            movieId = "d90614a1-418e-4df4-b536-d9cbfadc5137"
                        },
                        new
                        {
                            cinemaId = "6f9ca402-d953-462b-ab12-b28b05a49808",
                            movieId = "7ee0a915-9de4-44b2-8ae9-6dfb125e1885"
                        },
                        new
                        {
                            cinemaId = "8abd9fb0-1947-42e6-a662-aac5706e98fe",
                            movieId = "d90614a1-418e-4df4-b536-d9cbfadc5137"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.Language", b =>
                {
                    b.Property<string>("languageId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("languageDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("languageId");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            languageId = "2e2daf74-000b-4ab5-ac6f-f8df49ed5b34",
                            languageDetail = "English"
                        },
                        new
                        {
                            languageId = "3cdd89a3-6e98-4437-a8df-d5fc859f8f60",
                            languageDetail = "Vietnamese"
                        },
                        new
                        {
                            languageId = "d156ab5f-dad9-4e78-a576-03bf709b0443",
                            languageDetail = "Korean"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieCommentDetail", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userCommentDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("movieId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("movieCommentDetail");
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenre", b =>
                {
                    b.Property<string>("movieGenreId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieGenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("movieGenreId");

                    b.ToTable("movieGenre");

                    b.HasData(
                        new
                        {
                            movieGenreId = "07d8e8f7-e1e2-468d-840b-3487f85d70d3",
                            movieGenreName = "Action"
                        },
                        new
                        {
                            movieGenreId = "14022b98-5fa7-4ce6-b2ec-b957c37f46ef",
                            movieGenreName = "Comedy"
                        },
                        new
                        {
                            movieGenreId = "3bfc07cd-8d34-4410-bcc5-dfb9b874dbd3",
                            movieGenreName = "Horror"
                        },
                        new
                        {
                            movieGenreId = "9c6c54c2-ac9e-475f-bfff-316a92f19fa4",
                            movieGenreName = "Drama"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenreInformation", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieGenreId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("movieId", "movieGenreId");

                    b.HasIndex("movieGenreId");

                    b.ToTable("movieGenreInformation");

                    b.HasData(
                        new
                        {
                            movieId = "d90614a1-418e-4df4-b536-d9cbfadc5137",
                            movieGenreId = "07d8e8f7-e1e2-468d-840b-3487f85d70d3"
                        },
                        new
                        {
                            movieId = "d90614a1-418e-4df4-b536-d9cbfadc5137",
                            movieGenreId = "9c6c54c2-ac9e-475f-bfff-316a92f19fa4"
                        },
                        new
                        {
                            movieId = "7ee0a915-9de4-44b2-8ae9-6dfb125e1885",
                            movieGenreId = "07d8e8f7-e1e2-468d-840b-3487f85d70d3"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("languageId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieActor")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("movieDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("movieDirector")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("movieDuration")
                        .HasColumnType("int");

                    b.Property<byte[]>("movieImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("movieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("movieTrailerUrl")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<string>("movieVisualFormatId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("movieId");

                    b.HasIndex("languageId");

                    b.HasIndex("movieVisualFormatId");

                    b.ToTable("movieInformation");

                    b.HasData(
                        new
                        {
                            movieId = "d90614a1-418e-4df4-b536-d9cbfadc5137",
                            languageId = "2e2daf74-000b-4ab5-ac6f-f8df49ed5b34",
                            movieActor = "Timothée Chalamet, Zendaya, Rebecca Ferguson",
                            movieDescription = "Paul Atreides unites with Chani and the Fremen while seeking revenge against those who destroyed his family.",
                            movieDirector = "Denis Villeneuve",
                            movieDuration = 166,
                            movieImage = new byte[] { 100, 117, 110, 101, 50, 95, 105, 109, 97, 103, 101, 95, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114 },
                            movieName = "Dune: Part Two",
                            movieTrailerUrl = "https://www.youtube.com/watch?v=Way9Dexny3w",
                            movieVisualFormatId = "cccf7edc-d930-4265-bc74-95fdf795df0a"
                        },
                        new
                        {
                            movieId = "7ee0a915-9de4-44b2-8ae9-6dfb125e1885",
                            languageId = "2e2daf74-000b-4ab5-ac6f-f8df49ed5b34",
                            movieActor = "Rebecca Hall, Brian Tyree Henry, Dan Stevens",
                            movieDescription = "Godzilla and Kong must unite to fight a colossal undiscovered threat hidden within our world.",
                            movieDirector = "Adam Wingard",
                            movieDuration = 115,
                            movieImage = new byte[] { 103, 111, 100, 122, 105, 108, 108, 97, 120, 107, 111, 110, 103, 95, 105, 109, 97, 103, 101, 95, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114 },
                            movieName = "Godzilla x Kong: The New Empire",
                            movieTrailerUrl = "https://www.youtube.com/watch?v=EOk9z-WbN5o",
                            movieVisualFormatId = "4d5b13c5-729b-41c5-817e-63fad594b511"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.Property<string>("movieScheduleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("showDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("movieScheduleId");

                    b.HasIndex("cinemaRoomId");

                    b.HasIndex("movieId");

                    b.ToTable("movieSchedule");

                    b.HasData(
                        new
                        {
                            movieScheduleId = "0ad4b2f0-c434-4e36-9c71-2cde3c752879",
                            cinemaRoomId = "61b5b1a8-8660-4332-8e96-08de8fa569ee",
                            movieId = "d90614a1-418e-4df4-b536-d9cbfadc5137",
                            showDateTime = new DateTime(2025, 6, 5, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            movieScheduleId = "f6fbb8ac-a9c8-47a4-89a2-b758486f7ebc",
                            cinemaRoomId = "61b5b1a8-8660-4332-8e96-08de8fa569ee",
                            movieId = "7ee0a915-9de4-44b2-8ae9-6dfb125e1885",
                            showDateTime = new DateTime(2025, 6, 5, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            movieScheduleId = "c4671773-8394-4719-add3-80888ebc9ce9",
                            cinemaRoomId = "f3fa182b-2a5f-4498-9802-b508c0f30957",
                            movieId = "d90614a1-418e-4df4-b536-d9cbfadc5137",
                            showDateTime = new DateTime(2025, 6, 6, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormat", b =>
                {
                    b.Property<string>("movieVisualFormatId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("movieVisualFormatId");

                    b.ToTable("movieVisualFormat");

                    b.HasData(
                        new
                        {
                            movieVisualFormatId = "cccf7edc-d930-4265-bc74-95fdf795df0a",
                            movieVisualFormatName = "2D"
                        },
                        new
                        {
                            movieVisualFormatId = "4d5b13c5-729b-41c5-817e-63fad594b511",
                            movieVisualFormatName = "3D"
                        },
                        new
                        {
                            movieVisualFormatId = "73cff8ce-a1c7-4d17-973e-d31af723b8d6",
                            movieVisualFormatName = "IMAX"
                        });
                });

            modelBuilder.Entity("backend.Model.Price.PriceInformation", b =>
                {
                    b.Property<string>("priceInformationId")
                        .HasColumnType("varchar(100)");

                    b.Property<long>("priceAmount")
                        .HasColumnType("bigint");

                    b.HasKey("priceInformationId");

                    b.ToTable("priceInformation");

                    b.HasData(
                        new
                        {
                            priceInformationId = "e9c3be04-3a96-45d0-8788-aafeee40e212",
                            priceAmount = 45000L
                        },
                        new
                        {
                            priceInformationId = "012d26d4-64d8-4be0-a82e-144870612d1e",
                            priceAmount = 70000L
                        });
                });

            modelBuilder.Entity("backend.Model.Price.priceInformationForEachUserFilmType", b =>
                {
                    b.Property<string>("userTypeId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("priceInformationID")
                        .HasColumnType("varchar(100)");

                    b.HasKey("userTypeId", "movieVisualFormatId", "priceInformationID");

                    b.HasIndex("movieVisualFormatId");

                    b.HasIndex("priceInformationID");

                    b.ToTable("priceInformationForEachUserFilmType");
                });

            modelBuilder.Entity("backend.Model.Price.userType", b =>
                {
                    b.Property<string>("userTypeId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("userTypeId");

                    b.ToTable("userType");

                    b.HasData(
                        new
                        {
                            userTypeId = "91928de1-daea-4f8f-973f-68b5ba5568ac",
                            userTypeDescription = "Adult"
                        },
                        new
                        {
                            userTypeId = "55e04c66-5e7a-4fbc-98cd-34b04c17a585",
                            userTypeDescription = "Child"
                        },
                        new
                        {
                            userTypeId = "c9f77688-5df2-4ea8-92d2-9b3172434d18",
                            userTypeDescription = "Student"
                        },
                        new
                        {
                            userTypeId = "5092cc44-56d1-4480-9772-72bfc4b7aa62",
                            userTypeDescription = "Senior"
                        });
                });

            modelBuilder.Entity("backend.Model.Product.foodInformation", b =>
                {
                    b.Property<string>("foodInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("foodInformationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("foodPrice")
                        .HasColumnType("bigint");

                    b.HasKey("foodInformationId");

                    b.ToTable("foodInformation");

                    b.HasData(
                        new
                        {
                            foodInformationId = "e11763e8-b991-4099-80cc-a0f95b4272e7",
                            foodInformationName = "Popcorn Medium",
                            foodPrice = 50000L
                        },
                        new
                        {
                            foodInformationId = "9cf3f1db-69cf-4f01-a2e4-58781fb1249c",
                            foodInformationName = "Coca-Cola",
                            foodPrice = 30000L
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userRoleInformation", b =>
                {
                    b.HasOne("backend.Model.Auth.roleInformation", "roleInformation")
                        .WithMany("userRoleInformation")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("userRoleInformation")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("roleInformation");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.Order", b =>
                {
                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("Order")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailFood", b =>
                {
                    b.HasOne("backend.Model.Product.foodInformation", "foodInformation")
                        .WithMany()
                        .HasForeignKey("foodInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Booking.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("foodInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailTicket", b =>
                {
                    b.HasOne("backend.Model.Movie.movieSchedule", "movieSchedule")
                        .WithMany("orderDetailTicket")
                        .HasForeignKey("movieScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Booking.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.PriceInformation", "PriceInformation")
                        .WithMany()
                        .HasForeignKey("priceInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.CinemaRoom.Seats", "Seats")
                        .WithMany()
                        .HasForeignKey("seatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PriceInformation");

                    b.Navigation("Seats");

                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.Seats", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("Seats")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.HasOne("backend.Model.Cinemas.Cinema", "Cinema")
                        .WithMany("cinemaRoom")
                        .HasForeignKey("cinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cleaningStatus", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("cleaningStatus")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("cleaningStatus")
                        .HasForeignKey("userInformationuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Cinemas.cinemaMovieInformation", b =>
                {
                    b.HasOne("backend.Model.Cinemas.Cinema", "Cinema")
                        .WithMany("cinemaMovieInformation")
                        .HasForeignKey("cinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("cinemaMovieInformation")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieCommentDetail", b =>
                {
                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieCommentDetail")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("movieCommentDetail")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieInformation");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenreInformation", b =>
                {
                    b.HasOne("backend.Model.Movie.movieGenre", "movieGenre")
                        .WithMany()
                        .HasForeignKey("movieGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany()
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieGenre");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.HasOne("backend.Model.Movie.Language", "Language")
                        .WithMany("movieInformation")
                        .HasForeignKey("languageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieVisualFormat", "movieVisualFormat")
                        .WithMany("movieInformation")
                        .HasForeignKey("movieVisualFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("movieVisualFormat");
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("movieSchedule")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieSchedule")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Price.priceInformationForEachUserFilmType", b =>
                {
                    b.HasOne("backend.Model.Movie.movieVisualFormat", "movieVisualFormat")
                        .WithMany("priceInformation")
                        .HasForeignKey("movieVisualFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.PriceInformation", "PriceInformation")
                        .WithMany("priceInformationForEachUserFilmType")
                        .HasForeignKey("priceInformationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.userType", "userType")
                        .WithMany("priceInformation")
                        .HasForeignKey("userTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceInformation");

                    b.Navigation("movieVisualFormat");

                    b.Navigation("userType");
                });

            modelBuilder.Entity("backend.Model.Auth.roleInformation", b =>
                {
                    b.Navigation("userRoleInformation");
                });

            modelBuilder.Entity("backend.Model.Auth.userInformation", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("cleaningStatus");

                    b.Navigation("movieCommentDetail");

                    b.Navigation("userRoleInformation");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("cleaningStatus");

                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.Cinemas.Cinema", b =>
                {
                    b.Navigation("cinemaMovieInformation");

                    b.Navigation("cinemaRoom");
                });

            modelBuilder.Entity("backend.Model.Movie.Language", b =>
                {
                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.Navigation("cinemaMovieInformation");

                    b.Navigation("movieCommentDetail");

                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.Navigation("orderDetailTicket");
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormat", b =>
                {
                    b.Navigation("movieInformation");

                    b.Navigation("priceInformation");
                });

            modelBuilder.Entity("backend.Model.Price.PriceInformation", b =>
                {
                    b.Navigation("priceInformationForEachUserFilmType");
                });

            modelBuilder.Entity("backend.Model.Price.userType", b =>
                {
                    b.Navigation("priceInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
